from http.server import HTTPServer, BaseHTTPRequestHandler


# -*- coding: utf-8 -*-
"""Crypt_Pre.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1u7p6kG4cfKnWvGRmWRaWVMjFgcovRbsG
"""

from fbprophet import Prophet
from fbprophet.plot import plot_plotly
from datetime import date
import yfinance as yf
import pandas as pd
from plotly import graph_objs as go
import json


def get_data_wrapper(label):
    def get_data(tick='BTC', cur='USD', start=2020):
        ticker = tick + '-' + cur
        s = str(start) + "-01-01"
        t = date.today().strftime("%Y-%m-%d")
        data = yf.download(ticker, s, t)
        data.reset_index(inplace=True)
        return data

    data = get_data(tick=label)

    df_train = data[['Date','Close']]
    df_train = df_train.rename(columns={"Date": "ds", "Close": "y"})

    try:
        model = Prophet()
        model.fit(df_train)
        forecast = model.predict(model.make_future_dataframe(periods=182))
        forecast = forecast.to_json()
        print("SUCCESSSSSSSSSSSSSSSSSSSSSSSSSSSSS")
        return forecast + "|" + df_train.to_json()
    except:
        print("NONONONONONONONONONONONONONONONONONO")
        return "{}"



class echoHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        term = self.path.split("/")[-1]
        print(term)
        if term != None:
            self.send_response(200)
            self.send_header('content-type', 'text')
            self.send_header('access-control-allow-origin', '*')
            self.end_headers()
            body = get_data_wrapper(term);
            print(type(body))
            self.wfile.write(body.encode())
        else:
            self.send_response(200)
            self.send_header('content-type', 'text/html')
            self.end_headers()
            self.wfile.write("Hello")


def main():
    PORT = 8000
    server_address = ('0.0.0.0', PORT)
    server = HTTPServer(server_address, echoHandler)
    print("Server running")
    server.serve_forever()

if __name__ == '__main__':
    main()
